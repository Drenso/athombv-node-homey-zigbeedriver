'use strict';

const { CLUSTER } = require('zigbee-clusters');

const { mapValueRange } = require('../../../util');

const UP_OPEN = 'upOpen';
const DOWN_CLOSE = 'downClose';
const REPORT_DEBOUNCER = 2000;

/**
 * Cluster capability configuration for `windowcoverings_set`.
 * @type {ClusterCapabilityConfiguration}
 */
module.exports = {
  getOpts: {
    getOnStart: true,
  },
  get: 'currentPositionLiftPercentage',
  set: 'goToLiftPercentage',
  /**
   * @param {number} value
   * @returns {Promise<null|{percentageliftvalue: number}>}
   */
  async setParser(value) {
    // This boolean can be used to determine if incoming report are generated by a set command
    // by Homey or externally
    this._reportDebounceEnabled = true;

    // Override goToLiftPercentage to enforce blind to open/close completely
    if (value === 0 || value === 1) {
      this.debug(`set → \`windowcoverings_set\`: ${value} → setParser → ${value === 1 ? UP_OPEN : DOWN_CLOSE}`);
      const windowCoveringEndpoint = this.getClusterEndpoint(CLUSTER.WINDOW_COVERING);
      if (windowCoveringEndpoint === null) throw new Error('missing_window_covering_cluster');

      const windowCoveringCommand = value === 1 ? UP_OPEN : DOWN_CLOSE;
      await this.zclNode.endpoints[windowCoveringEndpoint].clusters
        .windowCovering[windowCoveringCommand]();

      await this.setCapabilityValue('windowcoverings_set', value);
      return null;
    }
    const mappedValue = mapValueRange(0, 1, 100, 0, value);
    const gotToLiftPercentageCommand = {
      // Round, otherwise might not be accepted by device
      percentageLiftValue: Math.round(mappedValue),
    };
    this.debug(`set → \`windowcoverings_set\`: ${value} → setParser → goToLiftPercentage`, gotToLiftPercentageCommand);
    // Send goToLiftPercentage command
    return gotToLiftPercentageCommand;
  },
  report: 'currentPositionLiftPercentage',
  /**
   * @param {number} value
   * @returns {null|number}
   */
  reportParser(value) {
    // Validate input
    if (value < 0 || value > 100) return null;

    // Parse input value
    const parsedValue = mapValueRange(0, 100, 1, 0, value);

    // If reports are not generated by set command from Homey update directly
    if (!this._reportDebounceEnabled) return parsedValue;

    // Else set debounce timeout to prevent capability value updates while moving
    if (this._reportPercentageDebounce) clearTimeout(this._reportPercentageDebounce);

    // Wait `REPORT_DEBOUNCER` ms then set `this._reportDebounceEnabled` to false
    this._reportPercentageDebounce = setTimeout(() => {
      this._reportDebounceEnabled = false;
    }, REPORT_DEBOUNCER);

    // Return value
    return null;
  },
};
