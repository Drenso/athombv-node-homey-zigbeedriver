'use strict';

const util = require('../../../util');

const UP_OPEN = 'upOpen';
const DOWN_CLOSE = 'downClose';
const CLUSTER_CLOSURES_WINDOW_COVERING = 'windowCovering';

module.exports = {
  set: 'goToLiftPercentage',
  async setParser(setValue) {
    // This boolean can be used to determine if incoming report are generated by a set command
    // by Homey or externally
    this._reportDebounceEnabled = true;

    // Override goToLiftPercentage to enforce blind to open/close completely
    if (setValue === 0 || setValue === 1) {
      this.log(`do ${setValue === 1 ? UP_OPEN : DOWN_CLOSE}`);
      await this.zclNode.endpoints[this.getClusterEndpoint(CLUSTER_CLOSURES_WINDOW_COVERING)]
        .clusters.windowCovering[setValue === 1 ? UP_OPEN : DOWN_CLOSE]();
      await this.setCapabilityValue('windowcoverings_set', setValue);
      return null;
    }

    // Send goToLiftPercentage command
    const mappedValue = util.mapValueRange(0, 1, 100, 0, setValue);
    return {
      // Round, otherwise might not be accepted by device
      percentageliftvalue: Math.round(mappedValue),
    };
  },
  get: 'currentPositionLiftPercentage',
  reportParser(reportValue) {
    // eslint-disable-next-line no-shadow,no-constant-condition
    if (reportValue => 0 && reportValue <= 100) {
      return util.mapValueRange(0, 100, 1, 0, reportValue);
    }
    return null;
  },
  report: 'currentPositionLiftPercentage',
  getOpts: {
    getOnStart: true,
  },
};
